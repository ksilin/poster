#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib')
require 'main'
require 'optparse'
require 'yaml'
require 'pp'

# TODO: add options: programming lang for code blocks
# TODO: target blog, time constraints (with chronic)
# TODO: overwrite flag
# TODO: add tag extraction from blog posts to notes
# TODO: open external config
# TODO: create external config if not found
# TODO: merge config with cl params

TARGET_MSG = 'Specify the TARGET blog for extracted posts'
FILE_LIST_MSG = 'Which files to convert. ' \
    'No standard filename checks are performed. ' \
    'Defaults to all files in the working directory.'
DRY_RUN_MSG = 'Changes only logged, not performed.'
SOURCE_PATH_MSG = 'The path to the folder ' \
    'containing the files to convert. ' \
    'Defaults to the working directory: '
RECURSIVE_MSG = 'Converts all files in all subdirectories. False by default.'

def get_command_line_options(options = {})
  parser = OptionParser.new do |opts|
    opts.on('-n', '--dry-run', DRY_RUN_MSG) { options[:dry_run] = true }
    opts.on('-r', '--recursive', RECURSIVE_MSG) { options[:recursive] = true }
    opts.on('-f', '--files FILES', FILE_LIST_MSG) { |f| options[:files] = f }

    opts.on('-s', '--source PATH', SOURCE_PATH_MSG + Dir.pwd) do |path|
      options[:source_dir] = path
    end

    # TODO: try keyword completion:
    # http://ruby-doc.org/stdlib-1.9.3/libdoc/optparse/rdoc/OptionParser.html#method-i-on_tail
    opts.on('-t', '--target TARGET', TARGET_MSG) do |target|
      ensure_alphanumeric(target)
      options[:target_name] = target
    end

    opts.on('-v', '--verbose', 'more output') { options[:verbose] = true }
    opts.on('-i', '--interactive', 'interactive processing') { options[:interactive] = true }
    opts.on('-l', '--list', 'List all known targets.') { print_known_targets }
    opts.on('--config', 'List all configuration parameters.') { print_config }

    opts.on_tail('-h', '--help', 'Show this message') { puts opts }
  end

  parser.parse!
  options
rescue OptionParser::InvalidOption => e
  puts e
  puts parser
  exit 1
end

def ensure_alphanumeric(target)
  unless target =~ /^[_\-[:alnum:]]+$/
    fail ArgumentError, 'target must be alphanumeric including _ and -'
  end
end

def print_known_targets
  conf = Conf.new
  puts
  puts 'known targets:'
  pp conf[:blogs]
  puts
end

def print_config
  conf = Conf.new
  puts
  puts 'config:'
  pp conf
  puts
end

Poster::Main.convert(get_command_line_options)
