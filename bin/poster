#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib')
require 'poster'
require 'optparse'
require 'yaml'
require 'pp'

# TODO: add options: programming lang for code blocks
# TODO: target blog, time constraints (with chronic)
# TODO: overwrite flag
# TODO: add tag extraction from blog posts to notes
# TODO: open external config
# TODO: create external config if not found
# TODO: merge config with cl params

def get_command_line_options
  options = {}
  opt_parser = get_optparser(options)
  opt_parser.parse!
  options

rescue OptionParser::InvalidOption => e
  puts e
  puts opt_parser
  exit 1
end

def get_optparser(options)
  OptionParser.new do |opts|

    opts.on('-n', '--dry-run', 'Changes only logged, not performed.') do
      options[:dry_run] = true
    end

    opts.on('-f', '--files FILES', 'Which files to convert. ' +
        'No standard filename checks are performed. ' +
        'Defaults to all files in the working directory.') do |files|
      options[:files] = files
    end

    opts.on('-s', '--source PATH', 'The path to the folder '+
        'containing the files to convert. ' +
        "Defaults to the working directory: #{Dir.pwd}") do |path|
      options[:source_dir] = path
    end

    opts.on('-r', '--recursive',
            'Converts all files in all subdirectories. False by default.') do
      options[:recursive] = true
    end

    opts.on('-t', '--target TARGET',
            'Specify the TARGET blog for extracted posts') do |target|
      unless target =~ /^[_\-[:alnum:]]+$/
        fail ArgumentError, 'target must be alphanumeric with _ or/and -'
      end
      options[:target_name] = target
    end

    opts.on('-v', '--verbose', 'more output.') { options[:verbose] = true }

    opts.on('-l', '--list', 'List all known targets.') { print_known_blogs }
    opts.on('--config', 'List all configuration parameters.') { print_config }
    opts.on_tail('-h', '--help', 'Show this message') { puts opts }
  end
end

def print_known_blogs
  conf = Conf.new
  puts
  puts 'known blogs:'
  pp conf[:blogs]
  puts
end

def print_config
  conf = Conf.new
  puts
  puts 'config:'
  pp conf
  puts
end

Poster.convert(get_command_line_options)
