#!/usr/bin/env ruby
require 'poster'
require 'optparse'
require 'yaml'

# TODO add help
# TODO add options: programming lang for code blocks, target blog, time constraints (with chronic)
# TODO - overwrite flag
# TODO - verbose flag
# TODO - add tag extraction from blog posts to notes


# TODO open external config
# TODO create external config if not found

config = Conf.new

# TODO - merge config with cl params

def get_command_line_options
  options = {}
  opt_parser = OptionParser.new do |opts|

    opts.on('-n', '--dry-run', 'Effects no changes, prints all steps') do
      options[:dry_run] = true
    end

    opts.on('-f', '--files FILES', 'Which files to convert. Defaults to all files in the working directory.') do |files|
      options[:files] = files
    end

    opts.on('-s', '--source PATH', 'The path to the folder containing the files to convert. Defaults to the working directory.') do |path|
      options[:source_dir] = path
    end

    opts.on('-r', '--recursive', 'Also converts all files in all subdirectories of the working directory. False by default.') do
      options[:recursive] = true
    end

    opts.on('-t', '--target TARGET', 'Specify the TARGET blog for extracted posts') do |target|
      unless target =~ /^[_\-[:alnum:]]+$/
        raise ArgumentError, 'target must be alphanumeric with _ or/and -'
      end
      options[:target_name] = target
    end

    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
    end
    options
  end

  opt_parser.parse!
  return options
end

options = get_command_line_options
p "command-line options: #{options}"

puts Poster.convert(options)

