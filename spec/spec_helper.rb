require 'poster'
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end

def with_tempdir(filenames = [])
  Dir.mktmpdir { |dir|
    create_temp_files(dir, filenames)
    yield dir
  }
end

# TODO - how to pass an array of arrays withe filenames and let the method create the temp dirs depending on the size of the array
def with_two_temp_dirs(filenames1 = [], filenames2 = [])

  with_tempdir(filenames1){ |dir1|
    with_tempdir(filenames2){ |dir2| yield dir1, dir2 }
  }
end

# TODO fill the files with repeated digests of their names
def create_temp_files(dir, filenames)

  filenames.each { |name|
    file_name = File.join(dir, name.to_s)
    FileUtils.mkdir_p(File.dirname(file_name))
    open(file_name, 'w')
  }
end

# creating temp directories recursively
def with_tempdirs(filenames = [[]], directories = [], &block)

  if filenames.empty?
    return block.call(directories)
  end

  with_tempdir(filenames.pop){ |dir|
    with_tempdirs(filenames, directories << dir, &block)
  }
end
